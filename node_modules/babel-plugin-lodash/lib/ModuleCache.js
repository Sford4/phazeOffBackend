"use strict";

exports.__esModule = true;
exports.default = void 0;

var _assign2 = _interopRequireDefault(require("lodash/assign"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _startsWith2 = _interopRequireDefault(require("lodash/startsWith"));

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _toString2 = _interopRequireDefault(require("lodash/toString"));

var _fs = _interopRequireDefault(require("fs"));

var _glob = _interopRequireDefault(require("glob"));

var _MapCache = _interopRequireDefault(require("./MapCache"));

var _module = _interopRequireDefault(require("module"));

var _util = require("./util");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*----------------------------------------------------------------------------*/
class ModuleCache extends _MapCache.default {
  constructor(moduleRoot) {
    super();
    moduleRoot = (0, _toString2.default)(moduleRoot);

    if (!moduleRoot) {
      return;
    }

    const pkgPath = _path.default.join(moduleRoot, 'package.json');

    const pkgMain = _fs.default.existsSync(pkgPath) && require(pkgPath).main || 'index.js';
    const mainPath = (0, _util.normalizePath)(_path.default.dirname(_path.default.resolve(moduleRoot, pkgMain))); // Sort paths by the “main” entry first.

    const dirPaths = (0, _orderBy2.default)(_glob.default.sync(_path.default.join(moduleRoot, '**/'), {
      'ignore': _path.default.join(moduleRoot, 'node_modules/**/')
    }), dirPath => (0, _startsWith2.default)(dirPath, mainPath), ['desc']);
    (0, _each2.default)(dirPaths, dirPath => {
      const base = _path.default.relative(moduleRoot, dirPath);

      const filePaths = _glob.default.sync(_path.default.join(dirPath, '*.js'));

      const pairs = (0, _map2.default)(filePaths, filePath => {
        const name = _path.default.basename(filePath, '.js');

        return [name.toLowerCase(), name];
      });
      this.set(base, new _MapCache.default(pairs));
    });
  }

  static resolve(id, from = process.cwd()) {
    try {
      const dirs = _path.default.dirname(_module.default._resolveFilename(id, (0, _assign2.default)(new _module.default(), {
        'paths': _module.default._nodeModulePaths(from)
      }))).split(_path.default.sep);

      let length = dirs.length;

      while (length--) {
        const dirSub = dirs.slice(0, length + 1);
        const dirPath = dirSub.join('/');

        const pkgPath = _path.default.join(dirPath, 'package.json');

        if (length && dirs[length - 1] == 'node_modules' || _fs.default.existsSync(pkgPath) && require(pkgPath).name == id) {
          return dirPath;
        }
      }

      return dirs.join('/');
    } catch (e) {}

    return '';
  }

}

exports.default = ModuleCache;
;
module.exports = exports["default"];